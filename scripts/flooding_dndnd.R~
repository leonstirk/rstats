source('scripts/flooding_data_processing.R')

flood_sub_tainui_forbury <- subset(flood_sub, flood_prone == 1)
flood_sub_forbury_dudall <- subset(flood_sub, flood_prone == 0 | flooded == 1)
flood_sub_tainui_dudall <- subset(flood_sub, flooded == 0)

ldf <- list(flood_sub_tainui_forbury, flood_sub_forbury_dudall, flood_sub_tainui_dudall)

##############################
## Assign treatment variable #
##############################
## treatment == Tainui
ldf <- Map(cbind, ldf, treatment = lapply(ldf, function(df) { df$treatment <- ifelse(df$flood_prone == 1 & df$flooded == 0,1,0) }))

ldf_t <- lapply(ldf, function(df) { list(subset(df, after_flood == 0), subset(df, after_flood == 1)) })

## Do matching on before_flood and after_flood groups #
l_m <- lapply(ldf_t, function(ldf) { lapply(ldf, function(df) { matchSamples(das_vars, df) }) })

break

l_m_out <- lapply(l_m, function(l_m) { l_m[[1]] })
l_m_data <- lapply(l_m, function(l_m) { l_m[[2]] })
l_m_matches <- lapply(l_m, function(l_m) { l_m[[2]] })

dnd_data <- rbind(l_m_data[[1]],l_m_data[[2]])

## dnd_model_formula <- as.formula(paste("ln_sale_price ~ after_flood + flooded + after_flood*flooded + ",model_lhs_vars))
## dnd_model_formula <- as.formula(paste("ln_sale_price ~ after_flood + flood_prone + after_flood*flood_prone + ",model_lhs_vars))

## dnd_model_formula <- as.formula(paste("ln_sale_price ~ after_flood + flooded + after_flood*flooded"))
## dnd_model_formula <- as.formula(paste("ln_sale_price ~ after_flood + flood_prone + after_flood*flood_prone"))

## Triple interaction formula #
## dnd_model_formula <- as.formula(paste("ln_sale_price ~ after_flood + flooded + after_flood*flooded" + after_flood*median_income + flooded*median_income + after_flood*flooded*medan_income + ", model_lhs_vars))

## Post-matching parametric analysis (linear regression model)
fit <- lm(dnd_model_formula, data=dnd_data)
raw_fit <- lm(dnd_model_formula, data=flood_sub)

lfit <- list(fit, raw_fit)
lfit <- lapply(lfit, summary)
lfit_clean <- lapply(lfit, function(fit) {clean_summary(fit$coefficients,4)})

####################
## Balance summary #
####################
l_bal_sum <- lapply(l_m_out, summary)
## l_bal_plot <- lapply(l_m_out, plot)
## l_bal_plot_sum <- lapply(l_m_out, function(m_out) { plot(summary(m_out, standardize=TRUE)) })

###################
## Zelig analysis #
###################
## z_out <- zelig(zelig_model_formula, model = "ls", data = m_data)
## c_out <- setx(z_out, treatment = 0)
## t_out <- setx(z_out, treatment = 1)
## s_out <- sim(z_out, c_out, t_out)
