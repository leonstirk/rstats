install.packages("memisc")
require(memisc)
mtable
install.packages("pander")
require(pander)
library(pander)
pander()
devtools::install_github('Rapporter/pander')
install.packages("devtools")
library(devtools)
devtools::install_github('Rapporter/pander')
lm0 <- lm(hp ~ wt, mtcars)
lm1 <- lm(qsec ~ hp, mtcars)
lm2 <- lm(qsec ~ wt, mtcars)
require(memisc)
mtable123 <- mtable('Model 1' = lm0,
'Model 2' = lm1,
'Model 3' = lm2,
summary.stats = c('R-squared','F','p','N'))
pander(mtable123)
mtable123
pander
pandoc.table(mtable123)
pander.mtable(mtable123)
pander(mtable123)
pander
!pander
?pander
install.packages("pander")
install.packages("pander")
pander::pander(mtable123)
mtable123
mtable123
mtable123 <- mtable('Model 1' = lm0,
'Model 2' = lm1,
'Model 3' = lm2,
summary.stats = c('R-squared','F','p','N'))
require(memisc)
mtable123 <- mtable('Model 1' = lm0,
'Model 2' = lm1,
'Model 3' = lm2,
summary.stats = c('R-squared','F','p','N'))
mtable123
pander(mtable123)
require(pander)
pander(mtable123)
?pander
version(pander)
pander -v
pander ?v
installed.packages()
installed.packages(pander())
installed.packages(pander
)
installed.packages()
sessionInfo()
remove.packages(pander)
lm0 <- lm(hp ~ wt, mtcars)
lm1 <- lm(qsec ~ hp, mtcars)
lm2 <- lm(qsec ~ wt, mtcars)
require(memisc)
mtable123 <- mtable('Model 1' = lm0,
'Model 2' = lm1,
'Model 3' = lm2,
summary.stats = c('R-squared','F','p','N'))
mtable123
require(xtable)
xtable(lm0)
lm0 <- lm(hp ~ wt, mtcars)
lm1 <- lm(qsec ~ hp, mtcars)
lm2 <- lm(qsec ~ wt, mtcars)
xtable(lm0)
lm0
summary(lm0)
install.packages("huxtable")
data(diamonds, package = 'ggplot2')
lm1 <- lm(price ~ carat + depth, diamonds)
lm2 <- lm(price ~ depth + factor(color, ordered = FALSE), diamonds)
lm3 <- lm(log(price) ~ carat + depth, diamonds)
huxreg(lm1, lm2, lm3)
library(huxtable)
huxreg(lm1, lm2, lm3)
install.packages("broom")
libray(broonm)
libray(broom)
library(broom)
huxreg(lm1, lm2, lm3)
require(MatchIt)
require(cem)
require(cem)
install.packages('cem')
require(cem)
install.packages(tcltk)
install.packages('tcltk')
require(cem)
library(cem)
library(cem)
capabilities("tcltk")
system("ls -ld /usr/local /usr/local/lib /usr/local/lib/libtcl*")
setwd('~/Desktop/projects/matching_estimator_flooding_south_dunedin_2000_2018/')
source('scripts/newD.R')
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'flood_prone')
source('functions/partial_plots.R')
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'flood_prone')
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'sale_year')
partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'building_floor_area', 'poly(building_floor_area, 2, raw = TRUE)')
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'good_land_view')
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'bathrooms')
lapply(flood_data_subsets[["BF"]], class)
lapply(flood_data_subsets[["BF"]][data_vars], class)
source('scripts/newD.R')
source('scripts/newD.R')
full_spec_reg_list
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'deck')
source('scripts/newD.R')
full_spec_reg_list
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'offstreet_parking')
source('scripts/newD.R')
source('scripts/newD.R')
Last login: Mon Dec  2 14:15:09 on ttys022
You have new mail.
[stirkwang@Leons-Air:~]$screen
mah_vars = c(
"building_floor_area",
"land_area",
"median_income",
"homeowner_rate"
),
## exact_vars
exact_vars = c(
"after_flood",
"bedrooms",
"bathrooms",
"offstreet_parking",
"deck",
"good_land_view",
"good_water_view",
"period_built",
"contour",
"sale_year"
),
## model_vars
model_vars = c(
"sale_year"
,"building_floor_area"
,"land_area"
,"offstreet_parking"
,"deck"
,"good_land_view"
,"good_water_view"
,"contour"
,"bathrooms"
,"median_income"
,"homeowner_rate"
,"dist_cbd"
,"bedrooms"
## ,"period_built"
),
## poly2_vars
poly2_vars = c(
"building_floor_area"
,"land_area"
,"median_income"
-UU-:----F1  das_data_preprocessing.R   68% (217,0)   Git:master  (ESS[R] [none] Flymake:Wait[0 0] ElDoc) ----------------------------------------------
Leons-Air 0* bash  1 bash  2 bash  3- bash
[Restored 5/12/2019 at 9:25:47 AM]
Last login: Thu Dec  5 09:25:47 on ttys000
You have new mail.
Restored session: Thu  5 Dec 2019 09:25:01 NZDT
[stirkwang@Leons-Air:~]$
[stirkwang@Leons-Air:~]$screen
####################################################################################################################################################
source('scripts/flooding_data_processing.R')
####################################################################################################################################################
#####################
## Import functions #
#####################
## Reserve variable name 'data' for the partial residual analysis functions #
data <- data.frame() ## rm(data) after partial residual analysis has run #
source('functions/partial_residual_analysis_numeric_variables.R')
source('functions/partial_plots.R')
######################
## Set time blocking #
######################
before_flood <- subset(das, sale_date > (flood_date - (365 * 4)) & sale_date < flood_date) ## Before flood only
after_flood  <- subset(das, sale_date < (flood_date + (365 * 3.5)) & sale_date > flood_date)  ## After flood only
flood_sub    <- subset(das, sale_date > (flood_date - (365 * 4)) & sale_date < (flood_date + (365 * 3.5)))  ## Before and after flood
flood_data_subsets   <- list('BF' = before_flood, 'AF' = after_flood, 'IF' = flood_sub)
## Remove temporary variables #
rm(before_flood, after_flood, flood_sub)
restricted_flood_variables_summary <- floodVariablesSummary(flood_data_subsets[["IF"]])
restricted_sample_descriptives <- sampleDescriptivesTable(flood_data_subsets[["IF"]])
-UU-:----F1  baseline_analysis_prep.R   All (21,0)    Git:master  (ESS[R] [none] Flymake:Wait[0 0] ElDoc) ----------------------------------------------
(No changes need to be saved)
Leons-Air 0 bash  1 bash  2* bash  3 bash  4- bash  5 bash  6 bash
[Restored 9/12/2019 at 2:21:14 PM]
Last login: Mon Dec  9 14:21:13 on ttys000
You have new mail.
Restored session: Mon  9 Dec 2019 14:12:16 NZDT
[stirkwang@Leons-Air:~]$screen
pool_point_data <- function(partials_1, partials_2, var_list) {
hello <<- lapply(list(partials_1, partials_2), function(x) { x[var_list] })
pruned_obs_ids <- do.call(setdiff, args = lapply(data, function(x) { x$sale_id }))
pruned_data <- data[[1]][which(data[[1]]$sale_id %in% pruned_obs_ids),]
pruned_data$matched <- 'pruned'
data <- list("data_1" = data[[1]], "data_2" = data[[2]], "data_pruned" = pruned_data)
return(data)
}
################################################################################################################
plot_data <- function(partials_1, partials_2, var) {
fit_data   <- lapply(list(partials_1[[var]], partials_2[[var]]), function(x) { as.data.frame(x) })
point_data <- pool_point_data(partials_1[[var]], partials_2[[var]], c("sale_id", "x.all", "partials_y", "matched"))
return(list("fit_data" = fit_data, "point_data" = point_data))
}
################################################################################################################
partial_comparison_plot_factor <- function(reg_result_obj, var) {
data <- plot_data(reg_result_obj, var)
pch = 4 ## 20, 4, '.'
cex = 0.35
df_fit <- do.call("rbind", data[["fit_data"]])
df_points <- do.call("rbind", data[["point_data"]])
df_fit$matched <- factor(as.factor(df_fit$matched), levels = c("unmatched", "matched"))
df_points$matched <- factor(as.factor(df_points$matched), levels = c("unmatched", "matched", "pruned"))
ggplot(data = df_fit, aes(x = df_fit[var][,1], y = fit, color=matched)) + labs(title = var, x = var , y = "ln_sale_price") + geom_violin(data = df_po\
ints, aes(x = get(var), y = partials_y, color = matched), position = "identity", alpha = 0) + geom_point(position = position_dodge(width = 0.2)) + geom\
_errorbar(aes(ymin=fit-se, ymax=fit+se), width=0.2, position = 'dodge') + theme_bw()
## ggplot(data = df_fit, aes(x = df_fit[var][,1], y = fit, color=matched)) + labs(title = var, x = var , y = "ln_sale_price") + geom_point(position =\
position_dodge(width = 0.2)) + geom_errorbar(aes(ymin=fit-se, ymax=fit+se), width=0.2, position = 'dodge') + theme_bw()
}
################################################################################################################
partial_comparison_plot_interaction <- function(partials, x_axis, x1_x2) {
data <- plot_data(partials, x1_x2)
-UU-:----F1  partial_plots.R   Top (2,76)    Git:master  (ESS[R] [none] Flymake:Wait[0 0] ElDoc) -------------------------------------------------------
(No changes need to be saved)
Leons-Air 0 bash  1 bash  2 bash  3 bash  4* bash  5- bash
[Restored 12/12/2019 at 9:44:33 AM]
Last login: Thu Dec 12 09:44:32 on ttys000
You have new mail.
Restored session: Tue 10 Dec 2019 15:46:13 NZDT
[stirkwang@Leons-Air:~]$screen
round100 <- function(x) { 100*ceiling(quantile(x, .99))/100 }
densityCompare <- function(x, y, lab, title) {
sm.density.compare(x, y, model = "equal", xlab=lab, xlim = c(0,round100(x)))
title(main = title)
}
-UU-:----F1  density_compare.R   All (7,0)     Git:master  (ESS[R] [none] Flymake:Wait[0 0] ElDoc) -----------------------------------------------------
End of buffer
Leons-Air 0 bash  1 bash  2 bash  3- bash  4 bash  5 bash  6* bash
[Restored 10/01/2020 at 8:19:43 PM]
Last login: Fri Jan 10 20:19:32 on console
You have new mail.
Restored session: Fri 10 Jan 2020 20:18:56 NZDT
[stirkwang@Leons-Air:~]$screen
'homeowner_rate' = 'poly(homeowner_rate, 2, raw = TRUE)1',
'homeowner_rate\\textsuperscript{2}' = 'poly(homeowner_rate, 2, raw = TRUE)2',
'dist_cbd' = 'poly(dist_cbd, 3, raw = TRUE)1',
'dist_cbd \\textsuperscript{2}' = 'poly(dist_cbd, 3, raw = TRUE)2',
'dist_cbd \\textsuperscript{3}' = 'poly(dist_cbd, 3, raw = TRUE)3'
)
source('scripts/newD.R')
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'sale_year')
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'flood_prone')
partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'building_floor_area', 'poly(building_floor_area, 2, raw = TRUE)')
source('functions/partial_plots.R')
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'flood_prone')
source('functions/partial_plots.R')
partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'flood_prone')
test <- partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'flood_prone')
test[["violins"]]
test <- partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'sale_year')
test[["violins"]]
test[["no_violins"]]
test <- partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'land_area', 'poly(land_area, 2, raw = TRUE)')
test <- partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'dist_cbd', 'poly(dist_cbd, 3, raw = TRUE)')
test <- partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'homeowner_rate', 'homeowner_rate')
test <- partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'homeowner_rate', 'homeowner_rate1')
test <- partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'homeowner_rate', 'poly(homeowner_rate, 2, raw = TRUE)')
source('functions/partial_plots.R')
test <- partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'homeowner_rate', 'poly(homeowner_rate, 2, raw = TRUE)')
test <- partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'dist_cbd', 'poly(dist_cbd, 3, raw = TRUE)')
test <- partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'building_floor_ara', 'poly(building_floor_area, 2, raw = TRUE)')
test <- partialComparisonPlotScale(full_spec_partials_list, names(D_match_objects), 'building_floor_area', 'poly(building_floor_area, 2, raw = TRUE)')
test <- partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'sale_year')
test[["violins"]]
source('functions/partial_plots.R')
}')
source('functions/partial_plots.R')
test <- partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'sale_year')
test[["violins"]]
test <- partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'flood_prone')
test[["violins"]]
test[["no_violins"]]
test[["violins"]]
test <- partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'deck')
test[["violins"]]
test <- partialComparisonPlotFactor(full_spec_partials_list, names(D_match_objects), 'offstreet_parking')
test[["violins"]]
