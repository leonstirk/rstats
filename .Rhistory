a <- list(c('a','b'),c('a','b'))
a
a <- list(c('a',b),c('a',b))
b <- c(1,2,3,4,5,6,7,8,9,0)
a <- list(c('a',b),c('a',b))
a
a <- list(list('a',b),list('a',b))
a
melt(a)
list(list(1:3), 1, list(as.list(3:4), as.list(1:2)))
melt(list(list(1:3), 1, list(as.list(3:4), as.list(1:2))))
a <- list(list(1:3), 1, list(as.list(3:4), as.list(1:2)))
a
a[[1]]
a[[2]]
a[[3]]
a[[4]]
a[[1]]
a[[2]]
a[[3]]
a[[3]][[1]]
a[[3]][[2]]
a[[3]][[3]]
a[[3]][[2]]
a[[3]]
a[[3]][[1]]
melt(a[[3]])
melt(test)
acast(melt(test), aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
)
acast(melt(test), aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
)
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
airquality
aqm
melt(test, id = c('r2', 'genome'))
melt(test)
melt(test, id = c('L2'))
dcast(melt(test), L1 ~ L2
)
dcast(melt(test), value ~ L2
)
dcast(melt(test), value ~ L1)
dcast(melt(test), r2 ~ L1)
dcast(melt(test), L2 ~ L1 + value)
dcast(melt(test), value ~ L1, L2)
dcast(melt(test), value ~ L1 + L2)
source('functions/genetic.R')
warnings
source('functions/genetic.R')
test
test[1]
test[2]
test[2][[1]]
test[2][[2]]
bind_rows(lapply(test, as.data.frame.list, stringsAsFactors=FALSE))
test
source('functions/genetic.R')
bind_rows(lapply(test, as.data.frame.list, stringsAsFactors=FALSE))
lapply(test, as.list)
lapply(test, as.list)[1]
test[[1]]
rbind(lapply(test, as.list))
rbindlist(lapply(test, as.list))
f2 = function(l) {
n <- length(l[[1]])
split(unlist(l, use.names = FALSE), paste0("x", seq_len(n)))
}
f2(test)
lapply(test, "[[", 1)
lapply(test, "[[", 2)
lapply(test, "[[", 1)
unlist(lapply(test, "[[", 1))
sort(unlist(lapply(test, "[[", 1)))
unlist(lapply(test, "[[", 1))
unlist(lapply(test, "[[", 2))
cbind(unlist(lapply(test, "[[", 1)), lapply(test, "[[", 2))
cbind(unlist(lapply(test, "[[", 1)), lapply(test, "[[", 2))[1,2]
as.data.frame(cbind(unlist(lapply(test, "[[", 1)), lapply(test, "[[", 2)))
(cbind(unlist(lapply(test, "[[", 1)), lapply(test, "[[", 2)))
sort(cbind(unlist(lapply(test, "[[", 1)), lapply(test, "[[", 2)))
order(cbind(unlist(lapply(test, "[[", 1)), lapply(test, "[[", 2)), 1)
order(cbind(unlist(lapply(test, "[[", 1)), lapply(test, "[[", 2)))
?sort.list
test
sort.list(test)
with(test, order("r2"))
order(cbind(unlist(lapply(test, "[[", 1)), lapply(test, "[[", 2)))
unlist(lapply(test, "[[", 2))
lapply(test, "[[", 2)
source('functions/genetic.R')
}')
source('functions/genetic.R')
source('functions/genetic.R')
test
melt(test)
lapply(test, as.list)
rbind(lapply(test, as.list))
cbind(lapply(test, as.list))
source('functions/genetic.R')
test[[1]]
test[[1]][1,1]
test[[1]][1]
test[[1]][2]
cbind(lapply(test, as.list))
rbind(lapply(test, as.list))
rbindlist(lapply(test, as.list))
source('functions/genetic.R')
rbindlist(lapply(test, as.list))
rbindlist(lapply(test, as.list))[,]
rbindlist(lapply(test, as.list))[1,1]
rbindlist(lapply(test, as.list))[,1]
class(rbindlist(lapply(test, as.list))[,1])
class(rbindlist(lapply(test, as.list)))
class(rbindlist(lapply(test, as.list))$genome)
rbindlist(lapply(test, as.list))$genome
as.data.frame(rbindlist(lapply(test, as.list)))
View(as.data.frame(rbindlist(lapply(test, as.list))))
?paste
source('functions/genetic.R')
View(as.data.frame(rbindlist(lapply(test, as.list))))
source('functions/genetic.R')
View(as.data.frame(rbindlist(lapply(test, as.list))))
as.data.frame(rbindlist(lapply(test, as.list)))
order(as.data.frame(rbindlist(lapply(test, as.list))))
?order
m_df <- as.data.frame(rbindlist(lapply(test, as.list)))
m_df[order(r2)]
m_df[order('r2')]
m_df[order('r2'),]
m_df[do.call(order('r2')),]
transform(m_df)
View(transform(m_df))
?transform
?order
order(m_df$r2)
m_df[with(m_df, order(r2)),]
View(m_df[with(m_df, order(r2)),])
View(m_df[with(m_df, order(-r2)),])
m_df_o <- m_df[with(m_df, order(-r2)),]
m_df_o
View(m_df_o)
m_df[1]
m_df[,1]
m_df[1,]
with(m_df, order(-r2))
with(m_df, order(-r2))[1:pop/2]
pop <- 50
with(m_df, order(-r2))[1:pop/2]
with(m_df, order(-r2))[1:(pop/2)]
m_df[with(m_df, order(-r2))[1:(pop/2)],]
View(m_df[with(m_df, order(-r2))[1:(pop/2)],])
?strsplit
m_df$genome[1]
string <- m_df$genome[1]
class(string)
string[1]
string[1:2]
strsplit(string)
strsplit(string)
strsplit(string,0)
strsplit(string,NA)
strsplit(string,"NA")
strlen
length(string)
nchar(string)
strsplit(string,character(0))
m_df[,'genome']
m_df[(pop/4),'genome']
m_df[1:(pop/4),'genome']
pop/4
pop <- 52
pop/4
strsplit(m_df[1:(pop/4),'genome'], character(0)
)
strsplit(m_df[1:(pop/4),'genome'], character(0))
strsplit(m_df[1:(pop/4),'genome'], character(0))[1]
strsplit(m_df[1:(pop/4),'genome'], character(0))[1:length(genome)]
contor
cantor
strsplit(m_df[1:(pop/4),'genome'], character(0))[1:length(cantor)]
apply(strsplit(m_df[1:(pop/4),'genome'], character(0)), 2, function(x) { x[1:length(cantor)] })
apply(strsplit(m_df[1:(pop/4),'genome'], character(0)), 1, function(x) { x[1:length(cantor)] })
lapply(strsplit(m_df[1:(pop/4),'genome'], character(0)), function(x) { x[1:length(cantor)] })
lapply(strsplit(m_df[1:(pop/4),'genome'], character(0)), function(x) { x[1:(length(cantor)/2)] })
lapply(strsplit(m_df[1:(pop/4),'genome'], character(0)), function(x) { paste(x[1:(length(cantor)/2)], collapse = "" })
lapply(strsplit(m_df[1:(pop/4),'genome'], character(0)), function(x) { paste(x[1:(length(cantor)/2)], collapse = "") })
source('functions/genetic.R')
x
y
c(1,2,3,4,5,6,7,8)[4:2]
source('functions/genetic.R')
x
y
identical(x,y)
paste(x,y)
paste(x,y, collapse = "")
paste(x,y)
nchar(paste(x,y))
length(cantor)
length(cantor/2)
length(cantor)/2
source('functions/genetic.R')
x
y
source('functions/genetic.R')
m_df
m_df$r2
t(m_df$r2)
print(m_df$r2)
View(m_df$r2)
paste(x,y)
paste(x,y, collapse = "")
paste(x,y)[1]
ncharpaste(x,y)[1]
nchar(e)paste(x,y)[1]
nchar(paste(x,y)[1])
paste(x,y, sep = "")
nchar(paste(x,y, sep = ""))
source('functions/genetic.R')
source('functions/genetic.R')
offspring_genomes
offspring_genomes[1]
n_gen_model(dat, lm_model_formula, 'cantor', '4', offspring_genomes[1])
levels(dat[,'cantor'])
length(levels(dat[,'cantor']))
n_gen_model(dat, lm_model_formula, 'cantor', '4', offspring_genomes[1])
genome <- floor(runif(length(levels(data[,agg_group])), 0, n_sub))
genome <- floor(runif(length(levels(data[,'cantor'])), 0, n_sub))
genome <- floor(runif(length(levels(dat[,'cantor'])), 0, n_sub))
genome <- floor(runif(length(levels(dat[,'cantor'])), 0, '4'))
genome <- floor(runif(length(levels(dat[,'cantor'])), 0, 4))
genome
source('functions/genetic.R')
source('functions/genetic.R')
n_gen_model(dat, lm_model_formula, 'cantor', '4', offspring_genomes[1])
n_gen_model(dat, lm_model_formula, 'cantor', 4, offspring_genomes[1])
offspring_genomes[1]
strsplit(offspring_genomes[1],character(0))
as.numeric(strsplit(offspring_genomes[1],character(0)))
as.numeric(strsplit(offspring_genomes[1],character(0))[[1]])
strsplit(paste(x,y, sep = ""), charachter(0))
source('functions/genetic.R')
source('functions/genetic.R')
offspring_genomes
source('functions/genetic.R')
source('functions/genetic.R')
m_df
nrow(m_df)
nrow(o_df)
paste(x[1:(pop/4)],y[((pop/4)+1):(pop/2)], sep = "")
pop/2
x
y
source('functions/genetic.R')
paste(x[1:(pop/4)],y[((pop/4)+1):(pop/2)], sep = "")
paste(y[1:(pop/4)],x[((pop/4)+1):(pop/2)], sep = "")
source('functions/genetic.R')
offspring_genomes
o_df
View(o_df)
source('functions/genetic.R')
m_df
source('functions/genetic.R')
m_df
names(m_df)
names(o_df)
source('functions/genetic.R')
source('functions/genetic.R')
?runif
length(offspring_genomes[1])
offspring_genomes[1]
offspring_genomes[1]
runif(3,0,length(levels(cantor))
)
length(levels(cantor))
length(levels(cantor))cantor
cantor
length(cantor)
runif(3,0,length((cantor)
)
)
runif(3,0,length(cantor))
floor(runif(3,0,length(cantor)))
floor(runif(3,0,2)
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
floor(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,2))
ceiling(runif(3,0,length(cantor)))
offspring_genomes
source('functions/genetic.R')
source('functions/genetic.R')
mutate(c(a,b,c,d,e,f,g), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
source('functions/genetic.R')
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
mutate(c('a','b','c','d','e','f','g'), 4)
offspring_genomes
print(c('generation', 1))
source('functions/genetic.R')
genetic(dat, lm_model_formula, 'cantor', 4)
source('functions/genetic.R')
genetic(dat, lm_model_formula, 'cantor', 4)
paste(c('a','b'))
paste(c('a','b', sep = " "))
paste(c('a','b'), sep = " ")
paste(c('a','b','c'), sep = " ")
paste("a", "b", sep = " ")
source('functions/genetic.R')
genetic(dat, lm_model_formula, 'cantor', 4, 3000)
source('functions/genetic.R')
genetic(dat, lm_model_formula, 'cantor', 4, 1000)
source('functions/genetic.R')
plot(m_df[1,'r2'] ~ generation, xlim = c(0,3000), ylim = c(0.6, 1))
plot(m_df[1,'r2'] ~ , xlim = c(0,3000), ylim = c(0.6, 1))
plot(m_df[1,'r2'] ~ 1, xlim = c(0,3000), ylim = c(0.6, 1))
plot(m_df[1,'r2'] ~ 2, xlim = c(0,3000), ylim = c(0.6, 1))
points(c(0.7,500))
points(0.7, 500)
?points
points(c(0.7,500))
points(c(0.7,500))
points(c(0.7,500))
points(c(0.7,10000))
points(c(0.8,100))
plot(1,1,)
plot(1,1)
points(c(1.2,1.2))
points(1.2 ~1.2)
points(1.2 ~ 1.2)
points(data_frame(c(1.2,1.2)))
points(tibble(c(1.2,1.2)))
?tibble
tibble
tibble(1,2,3,4)
tibble(1,2)
points(tibble(1,2))
points(tibble(1,3))
points(tibble(1.4,1.4))
data.frame()
c(1,2,3,4,5,6,7,8)
plot(c(1,2,3,4,5,6,7,8))
source('functions/genetic.R')
}')
source('functions/genetic.R')
genetic(dat, lm_model_formula, 'cantor', 4, 1000)
source('functions/genetic.R')
genetic(dat, lm_model_formula, 'cantor', 4, 1000)
genome
genome <- "1201210121232210232113222023221203210220320122002202221122122102210321222212321230100130010003032231100030301100300320303233131313123123202221001112000010220131122112111"
genome
genome
strsplit(genome, character(0))
as.numeric(strsplit(genome, character(0)))
as.numeric(strsplit(genome, character(0))[[1]])
source('functions/genetic.R')
genetic(dat, lm_model_formula, 'cantor', 4, 100)
test <- genetic(dat, lm_model_formula, 'cantor', 4, 100)
plot(test[['evolution']])
test[["data"]]
makeGrid(test[["data"]], 'lon_gd2000_x', 'lat_gd2000_y', 20, 'genome')
source('functions/grid.R')
makeGrid(test[["data"]], 'lon_gd2000_x', 'lat_gd2000_y', 20, 'genome')
source('functions/grid.R')
makeGrid(test[["data"]], 'lon_gd2000_x', 'lat_gd2000_y', 20, 'genome')
source('functions/grid.R')
makeGrid(test[["data"]], 'lon_gd2000_x', 'lat_gd2000_y', 20, 'genome')
test[["data"]]
plotGrid <- function(data, var) {
counts <- as.data.frame(t(matrix(unlist(by(data, data$cell, function(x) { c(x$X[1], x$Y[1], mean(as.numeric(x[,var]))) })), nrow = 3)))
names(counts) <- c('X', 'Y', 'count')
plot <- ggplot(counts, aes(X,Y)) + geom_tile(aes(fill = count)) + scale_fill_gradientn(colors = c('blue','purple','orange','yellow'))
return(plot)
}
plotGrid(test[['data']], 'genome')
source('functions/genetic.R')
rm(list = ls())
source('functions/genetic.R')
source('functions/genetic.R')
source('functions/grid.R')
plot
dat
test <- genetic(dat, lm_model_formula, 'cantor', 4, 1000)
dat
dat[c('ln_sale_price', 'sale_year', 'building_floor_area', 'land_area', 'cantor')]
dat[c('ln_sale_price', 'sale_year', 'building_floor_area', 'land_area', 'cantor'),]
dat[,c('ln_sale_price', 'sale_year', 'building_floor_area', 'land_area', 'cantor')]
dat
dat['cantor']
dat[c('cantor')]
dat
source('functions/genetic.R')
dat
test <- genetic(dat, lm_model_formula, 'cantor', 4, 1000)
plot(test[["evolution"]])
plotGrid(test[['data']], 'genome')
dat
dat$genome <- test[["data"]]$genome
plotGrid(dat, 'genome')
plot
multiplot(plot, plotGrid(dat, 'genome'), ncol = 2)
multiplot(plot, plotGrid(dat, 'genome'))
multiplot(plot, plotGrid(dat, 'genome'), nrow = 1)
multiplot(plot, plotGrid(dat, 'genome'), cols = 2)
plot(test[["evolution"]], type = 'l')
test[["winner"]]
test[["final_generation"]]
test[["evolution"]]
test <- genetic(dat, lm_model_formula, 'cantor', 4, 3000)
plot(test[["evolution"]])
plot(test[["evolution"]], type = 'l')
multiplot(plot, plotGrid(dat, 'genome'), cols = 2)
source('functions/grid.R')
plot
data(iris)
set.seed(3984)
# set colours
myColRamp <- colorRampPalette(colors = c("#25591f", "#818c3c", "#72601b"))
holdout <- sample(1:150, 50)
# random forest model
rf <- randomForest(x = iris[-holdout,-5], y = iris$Species[-holdout], mtry = 2, ntree = 2000, proximity = TRUE)
rf
holdoout
holdout
iris
holdout
rf
y_predicted<-predict(rf, iris[holdout,-5])
df1<-data.frame(Orig=iris$Species[holdout], Pred=y_predicted)
confusionMatrix(table(df1$Orig, df1$Pred))
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("caret")
library(caret)
suppressPackageStartupMessages(library(caret))
install.packages('caret')
install.packages('caret')
devtools::install_github('topepo/caret/pkg/caret')
library(caret)
devtools::install_github('topepo/caret/pkg/caret')
install.packages("ModelMetrics")
devtools::install_github("JackStat/ModelMetrics")
y_predicted<-predict(rf, iris[holdout,-5])
df1<-data.frame(Orig=iris$Species[holdout], Pred=y_predicted)
rf
y_predicted<-predict(rf, iris[holdout,-5])
df1<-data.frame(Orig=iris$Species[holdout], Pred=y_predicted)
rm(list = ls())
source("functions/rf_agg.R")
source("functions/rf_agg.R")
source('scripts/baseline_analysis_prep.R')
remove.packages(plyr)
remove.packages('plyr')
install.packages('plyr')
install.packages("plyr")
